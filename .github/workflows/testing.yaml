name: 'CI/test and prepare release'
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  pull_request_target:
    types:
      - closed

env:
  is-merge-event: >-
    ${{ github.event_name == 'pull_request_target'
     && github.event.action == 'closed'
     && github.event.pull_request.merged == true }}

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Release pre-build'
    steps:
      - name: Get PR Labels and changed dirs
        id: pr_details
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_DETAILS=$(gh pr view $PR_URL --json labels,changedFiles,files)
          
          CHANGED_DIRS=$(echo "${PR_DETAILS}" | jq -r '[.files[].path | (if contains("/") then split("/") | .[0:-1] | join("/") else "." end) | select(. | startswith(".") | not)] | unique[]')
          LABELS=$(echo "${PR_DETAILS}" | jq '.labels[]| select((.name=="minor") or (.name=="major") or (.name=="patch") or (.name=="no-release")) |.name')
          
          NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
          NUMBER_OF_DIRS=$(echo "$CHANGED_DIRS" |wc -w)
          
          if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
            echo "Found label: $LABELS"
            echo "release_type=$LABELS" >> $GITHUB_OUTPUT
            echo "label_error=" >> $GITHUB_OUTPUT
          elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
            echo "label_error=Too many release type labels: $( echo $LABELS | tr '\n' ' ' )" >> $GITHUB_OUTPUT
          else
            echo "label_error=No release type labels found(patch/minor/major/no-release)" >> $GITHUB_OUTPUT
          fi

          if [ "$NUMBER_OF_DIRS" -gt "0" ]; then
            echo "Found Dirs: $CHANGED_DIRS"
            echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_OUTPUT
            echo "path_error="  >> $GITHUB_OUTPUT
          else
            echo "path_error=No Directories found in change path" >> $GITHUB_OUTPUT
          fi

      - name: Fail on invalid PR details
        if: steps.pr_details.outputs.label_error != '' || steps.pr_details.outputs.path_error != ''
        env:
          COMMIT_SHA: ${{ github.event.after }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Module Release');
            });

            let output = "#### Terraform Module Release";

            if( '${{ steps.pr_details.outputs.label_error }}' != '') {
              output += "\n\n##### PR Label error\n\n${{ steps.pr_details.outputs.label_error }}"
            }

            if( '${{ steps.pr_details.outputs.path_error }}' != '') {
              output += "\n\n##### PR Path error\n\n${{ steps.pr_details.outputs.path_error }}"
            }

            output += `*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`, Run SHA: ${process.env.COMMIT_SHA.substring(0, 7)}*`;

            if (botComment) {
                github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
                })
            } else {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
            }
