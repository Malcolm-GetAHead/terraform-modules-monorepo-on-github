name: 'CI/test and prepare release'
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  pull_request_target:
    types:
      - closed

env:
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.cache/terraform"
  terraform_version: 1.9.5
  is-merge-event: >-
    ${{ github.event_name == 'pull_request_target'
     && github.event.action == 'closed'
     && github.event.pull_request.merged == true }}

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Prepare and release'
    steps:
      - name: Get PR Labels and changed dirs
        id: pr_details
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_DETAILS=$(gh pr view $PR_URL --json labels,changedFiles,files)

          echo "${PR_DETAILS}"
          
          CHANGED_DIRS=$(echo "${PR_DETAILS}" | jq -r '[.files[] | select(.path | endswith(".tf")) | .path | (if contains("/") then split("/") | .[0:-1] | join("/") else "." end) | select(. | startswith(".") | not)] | unique[]')
          LABELS=$(echo "${PR_DETAILS}" | jq -r '.labels[]| select((.name=="minor") or (.name=="major") or (.name=="patch") or (.name=="no-release")) |.name')
          
          NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
          NUMBER_OF_DIRS=$(echo "$CHANGED_DIRS" |wc -w)
          
          if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
            echo "Found label: $LABELS"
            echo "release_type=$LABELS" >> $GITHUB_OUTPUT
            echo "label_error=" >> $GITHUB_OUTPUT
          elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
            echo "label_error=Too many release type labels: $( echo $LABELS | tr '\n' ' ' )" >> $GITHUB_OUTPUT
          else
            echo "label_error=No release type labels found(patch/minor/major/no-release)" >> $GITHUB_OUTPUT
          fi

          if [ "$NUMBER_OF_DIRS" -gt "0" ]; then
            echo "Found Dirs: $CHANGED_DIRS"
            {
              echo "CHANGED_DIRS<<EOF"
              echo "$CHANGED_DIRS"
              echo "EOF"
            }  >> $GITHUB_OUTPUT
            echo "path_error="  >> $GITHUB_OUTPUT
          else
            echo "path_error=No Directories found in changed paths" >> $GITHUB_OUTPUT
          fi

      - name: Fail on invalid PR details
        if: steps.pr_details.outputs.label_error != '' || steps.pr_details.outputs.path_error != ''
        env:
          COMMIT_SHA: ${{ github.event.after }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Module Release');
            });

            let output = "## Terraform Module Release";

            if( '${{ steps.pr_details.outputs.label_error }}' != '') {
              output += "\n\n### PR Label error\n\n${{ steps.pr_details.outputs.label_error }}"
            }

            if( '${{ steps.pr_details.outputs.path_error }}' != '') {
              output += "\n\n### PR Path error\n\n${{ steps.pr_details.outputs.path_error }}"
            }

            output += `\n\n*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`, Run SHA: ${process.env.COMMIT_SHA.substring(0, 7)}*`;

            if (botComment) {
                github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
                })
            } else {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
            }

            core.setFailed("Fail on invalid PR details");
      
      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache 
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/.cache/terraform"
          key: ${{ runner.os }}-${{ runner.arch }}-${{ env.terraform_version }}
      
      - name: Terraform Format
        run: |
          declare -a tf_fmt
          rtn_chk=0

          while read -r tf_dir; do
            if [ -d "$tf_dir" ]; then
              tf_fmt+=("$(terraform fmt -write=false -diff -no-color "$tf_dir")")
            else
              tf_fmt+=("Unable to check directory: '${tf_dir}'")
            fi
          done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'
          
          output=$(printf "%s\n" "${tf_fmt[@]}")

          if [ "$(echo $output | tr -d '\s' | tr -d '\n')" != "" ]; then
            rtn_chk=1
          fi
          
          echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
          echo "output=${output}"  >> $GITHUB_OUTPUT

          echo "Exit: ${rtn_chk}"
          echo "Output: ${output}"

      - name: Terraform Init
        run: |
          declare -a tf_init
          rtn_chk=0
          init_dir=$(pwd)

          while read -r tf_dir; do
            if [ -d "$init_dir/$tf_dir" ]; then
              cd "$init_dir/$tf_dir"
            
              tf_init+=("$(terraform init --backend=false || echo "")")
            else
              tf_init+=("Unable to check directory: '${tf_dir}'")
            fi
          done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'
          
          output=$(printf "%s\n" "${tf_init[@]}")

          if [ "$(echo $output | tr -d '\s' | tr -d '\n')" != "" ]; then
            rtn_chk=1
          fi
          
          echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
          echo "output=${output}"  >> $GITHUB_OUTPUT

          echo "Exit: ${rtn_chk}"
          echo "Output: ${output}"

          echo "Output: ${output}"

      - name: Terraform Validate
        run: |
          declare -a tf_val
          rtn_chk=0
          init_dir=$(pwd)

          while read -r tf_dir; do
            if [ -d "$init_dir/$tf_dir" ]; then
              cd "$init_dir/$tf_dir"
            
              tf_val+=("$(terraform validate -no-color || echo "")")
            else
              tf_val+=("Unable to check directory: '${tf_dir}'")
            fi
          done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'
          
          output=$(printf "%s\n" "${tf_val[@]}")

          if [ "$(echo $output | tr -d '\s' | tr -d '\n')" != "" ]; then
            rtn_chk=1
          fi
          
          echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
          echo "output=${output}"  >> $GITHUB_OUTPUT

          echo "Exit: ${rtn_chk}"
          echo "Output: ${output}"
