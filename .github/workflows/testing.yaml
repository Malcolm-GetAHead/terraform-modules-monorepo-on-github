name: 'CI/test and prepare release'
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  pull_request_target:
    types:
      - closed

env:
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.cache/terraform"
  TF_LINT_CACHE_DIR: "${{ github.workspace }}/.cache/tflint"
  terraform_version: 1.9.5
  is-merge-event: >-
    ${{ github.event_name == 'pull_request_target'
     && github.event.action == 'closed'
     && github.event.pull_request.merged == true }}

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Prepare and release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: CICD Start PR comment
        uses: ./.github/actions/pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              :rocket: CICD Run Initilized!

      - name: Get PR Labels and changed dirs
        id: pr_details
        uses: ./.github/actions/pr-details
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr_url: ${{github.event.pull_request.html_url}}
          
      - name: Fail on invalid PR details
        uses: ./.github/actions/pr-comment
        if: steps.pr_details.outputs.label_error != '' || steps.pr_details.outputs.path_error != ''
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release
              ${{ steps.pr_details.outputs.label_error }}
              ${{ steps.pr_details.outputs.path_error }}

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Create cache dir
        run: mkdir -p "${{ github.workspace }}/.cache/terraform"

      - name: Terraform Format
        id: tf_format
        run: |
          declare -a tf_fmt
          rtn_chk=0

          while read -r tf_dir; do
            if [ -d "$tf_dir" ]; then
              tf_fmt+=("$(terraform fmt -write=false -diff -no-color "$tf_dir" 2>&1)")
            else
              tf_fmt+=("Unable to check directory: '${tf_dir}'")
            fi
          done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'
          
          output=$(printf "%s\n" "${tf_fmt[@]}")

          if [ "$(echo $output | tr -d '\s' | tr -d '\n')" != "" ]; then
            rtn_chk=1
          fi
          
          echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
          {
            echo "output<<EOF"
            echo "$output"
            echo "EOF"
          }  >> $GITHUB_OUTPUT

          echo "Exit: ${rtn_chk}"
          echo "Output: ${output}"

      - name: Fail on invalid TF Format
        uses: ./.github/actions/pr-comment
        if: steps.tf_format.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              ### Terraform Format Error
              </summary>
              
              ```diff
              ${{ steps.tf_format.outputs.output }}
              ```
              </details>

      - name: Terraform Init
        id: tf_init
        run: |
            declare -a tf_init
            rtn_chk=0
            init_dir=$(pwd)

            while read -r tf_dir; do
              if [ -d "$init_dir/$tf_dir" ]; then
                cd "$init_dir/$tf_dir" || exit 1
              
                rtn_val="$(terraform init -backend=false -no-color 2>&1 || true)"
                if ! grep -q 'Terraform has been successfully initialized' <<< "$rtn_val"; then
                  tf_init+=("$rtn_val")
                fi
              else
                tf_init+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'

            output=$(printf "%s\n" "${tf_init[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Fail on invalid TF Init
        uses: ./.github/actions/pr-comment
        if: steps.tf_init.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              ### Terraform Init Error
              </summary>
              
              ```
              ${{ steps.tf_init.outputs.output }}
              ```
              </details>

      - name: Terraform Validate
        id: tf_validate
        run: |
            declare -a tf_val
            rtn_chk=0
            init_dir=$(pwd)

            while read -r tf_dir; do
              if [ -d "$init_dir/$tf_dir" ]; then
                cd "$init_dir/$tf_dir" || exit 1
              
                rtn_val="$(terraform validate -no-color 2>&1 || true)"
                if ! grep -q 'The configuration is valid' <<< "$rtn_val"; then
                  tf_val+=("$rtn_val")
                fi
              else
                tf_val+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'

            output=$(printf "%s\n" "${tf_val[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Fail on invalid TF Validate
        uses: ./.github/actions/pr-comment
        if: steps.tf_validate.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              ### Terraform Validate Error
              </summary>
              
              ```
              ${{ steps.tf_validate.outputs.output }}
              ```
              </details>

      - name: TFLintCache plugin dir
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_LINT_CACHE_DIR }}
          key: tflint-${{ hashFiles('.tflint.hcl') }}
  
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.53.0
      
      - name: TFLint Init
        run: tflint --init -c "${{ github.workspace }}/.tflint.hcl"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      
      - name: TF Lint
        id: tf_lint
        run: |
            declare -a tf_lint
            rtn_chk=0

            while read -r tf_dir; do
              if [ -d "$tf_dir" ]; then
                rtn_val="$(tflint -f compact --force --call-module-type=none --no-color --chdir "${tf_dir}" 2>&1 || true)"
                tf_lint+=("$rtn_val")
              else
                tf_lint+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'

            output=$(printf "%s\n" "${tf_lint[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Fail on invalid TFlint
        uses: ./.github/actions/pr-comment
        if: steps.tf_lint.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              ### TFLint Error
              </summary>
              
              ```
              ${{ steps.tf_lint.outputs.output }}
              ```
              </details>
