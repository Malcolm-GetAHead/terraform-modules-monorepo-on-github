name: 'CI/test and prepare release'
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  pull_request_target:
    types:
      - closed

env:
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.cache/terraform"
  terraform_version: 1.9.5
  is-merge-event: >-
    ${{ github.event_name == 'pull_request_target'
     && github.event.action == 'closed'
     && github.event.pull_request.merged == true }}

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Prepare and release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PR Labels and changed dirs
        id: pr_details
        uses: ./.github/actions/pr-details
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr_url: ${{github.event.pull_request.html_url}}

      # - name: Get PR Labels and changed dirs
      #   id: pr_details
      #   env:
      #     PR_URL: ${{github.event.pull_request.html_url}}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     PR_DETAILS=$(gh pr view $PR_URL --json labels,changedFiles,files)

      #     echo "${PR_DETAILS}"
          
      #     CHANGED_DIRS=$(echo "${PR_DETAILS}" | jq -r '[.files[] | select(.path | endswith(".tf")) | .path | (if contains("/") then split("/") | .[0:-1] | join("/") else "." end) | select(. | startswith(".") | not)] | unique[]')
      #     LABELS=$(echo "${PR_DETAILS}" | jq -r '.labels[]| select((.name=="minor") or (.name=="major") or (.name=="patch") or (.name=="no-release")) |.name')
          
      #     NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
      #     NUMBER_OF_DIRS=$(echo "$CHANGED_DIRS" |wc -w)
          
      #     if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
      #       echo "Found label: $LABELS"
      #       echo "release_label=$LABELS" >> $GITHUB_OUTPUT
      #       echo "label_error=" >> $GITHUB_OUTPUT
      #     elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
      #       {
      #         echo "label_error<<EOF"
      #         echo "### PR Label error"
      #         echo "Too many release type labels: $( echo $LABELS | tr '\n' ' ' )"
      #         echo "EOF"
      #       }  >> $GITHUB_OUTPUT
      #     else
      #       {
      #         echo "label_error<<EOF"
      #         echo "### PR Label error"
      #         echo "No release type labels found (patch/minor/major/no-release)"
      #         echo "EOF"
      #       }  >> $GITHUB_OUTPUT
      #       echo "label_error=" >> $GITHUB_OUTPUT
      #     fi

      #     if [ "$NUMBER_OF_DIRS" -gt "0" ]; then
      #       echo "Found Dirs: $CHANGED_DIRS"
      #       {
      #         echo "changed_dirs<<EOF"
      #         echo "$CHANGED_DIRS"
      #         echo "EOF"
      #       }  >> $GITHUB_OUTPUT
      #       echo "path_error="  >> $GITHUB_OUTPUT
      #     else
      #       {
      #         echo "path_error<<EOF"
      #         echo "### PR Path error"
      #         echo "No terraform files found in directories with changes"
      #         echo "EOF"
      #       }  >> $GITHUB_OUTPUT
      #     fi
          
      - name: Fail on invalid PR details
        uses: ./.github/actions/pr-comment
        if: steps.pr_details.outputs.label_error != '' || steps.pr_details.outputs.path_error != ''
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release
              ${{ steps.pr_details.outputs.label_error }}
              ${{ steps.pr_details.outputs.path_error }}

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Create cache dir
        run: mkdir -p "${{ github.workspace }}/.cache/terraform"

      - name: Terraform Format
        run: |
          declare -a tf_fmt
          rtn_chk=0

          while read -r tf_dir; do
            if [ -d "$tf_dir" ]; then
              tf_fmt+=("$(terraform fmt -write=false -diff -no-color "$tf_dir" 2>&1)")
            else
              tf_fmt+=("Unable to check directory: '${tf_dir}'")
            fi
          done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'
          
          output=$(printf "%s\n" "${tf_fmt[@]}")

          if [ "$(echo $output | tr -d '\s' | tr -d '\n')" != "" ]; then
            rtn_chk=1
          fi
          
          echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
          {
            echo "output<<EOF"
            echo "$output"
            echo "EOF"
          }  >> $GITHUB_OUTPUT

          echo "Exit: ${rtn_chk}"
          echo "Output: ${output}"

      - name: Terraform Init
        run: |
            declare -a tf_init
            rtn_chk=0
            init_dir=$(pwd)

            while read -r tf_dir; do
              if [ -d "$init_dir/$tf_dir" ]; then
                cd "$init_dir/$tf_dir" || exit 1
              
                rtn_val="$(terraform init -backend=false -no-color 2>&1 || true)"
                if ! grep -q 'Terraform has been successfully initialized' <<< "$rtn_val"; then
                  tf_init+=("$rtn_val")
                fi
              else
                tf_init+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'

            output=$(printf "%s\n" "${tf_init[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Terraform Validate
        run: |
            declare -a tf_val
            rtn_chk=0
            init_dir=$(pwd)

            while read -r tf_dir; do
              if [ -d "$init_dir/$tf_dir" ]; then
                cd "$init_dir/$tf_dir" || exit 1
              
                rtn_val="$(terraform validate -no-color 2>&1 || true)"
                if ! grep -q 'The configuration is valid' <<< "$rtn_val"; then
                  tf_val+=("$rtn_val")
                fi
              else
                tf_val+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.CHANGED_DIRS }}'

            output=$(printf "%s\n" "${tf_val[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"
