name: 'CI/test and prepare release'
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  pull_request_target:
    types:
      - closed

env:
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.terraform/cache"
  TFLINT_PLUGIN_DIR: "${{ github.workspace }}/.cache/tflint"
  TRIVY_CACHE_DIR: "${{ github.workspace }}/.cache/trivy"
  is-merge-event: >-
    ${{ github.event_name == 'pull_request_target'
     && github.event.action == 'closed'
     && github.event.pull_request.merged == true }}

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Prepare and release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform Tools Cache
        uses: actions/cache@v4
        id: tf-tools-cache
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/.local/bin
          key: tfcache-${{ hashFiles('.github/dependencies/*') }}

      - name: Terraform Plugin Cache
        uses: actions/cache@v4
        id: tf-cache
        with:
          path: |
            ${{ env.TF_PLUGIN_CACHE_DIR}}
          key: tfcache-${{ hashFiles('**/providers.tf', '**/versions.tf') }}

      - name: Cache config
        run: |
          echo "${{ github.workspace }}/.local/bin" >> "$GITHUB_PATH"
          mkdir -p "${{ github.workspace }}/.cache" "${{ env.TF_PLUGIN_CACHE_DIR }}" "${{ env.TFLINT_PLUGIN_DIR }}"

      - name: TF Dependencies
        run: |
            export PATH="${{ github.workspace }}/.local/bin:${PATH}"
            for x in "${{ github.workspace }}"/.github/dependencies/*sh; do
              echo "Running: ${x}"
              $x
              echo "---"
            done
        if: steps.tf-tools-cache.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          WS_DIR: ${{ github.workspace }}
          TFLINT_PLUGIN_DIR: ${{ env.TFLINT_PLUGIN_DIR }}

      - name: CICD Start PR comment
        uses: ./.github/actions/pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              :rocket: CICD Run Initilized!

      - name: Get PR Labels and changed dirs
        id: pr_details
        uses: ./.github/actions/pr-details
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr_url: ${{github.event.pull_request.html_url}}
          
      - name: Fail on invalid PR details
        uses: ./.github/actions/pr-comment
        if: steps.pr_details.outputs.label_error != '' || steps.pr_details.outputs.path_error != ''
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release
              ${{ steps.pr_details.outputs.label_error }}
              ${{ steps.pr_details.outputs.path_error }}

      - name: Terraform Format
        id: tf_format
        run: |
          declare -a tf_fmt
          rtn_chk=0

          which terraform

          while read -r tf_dir; do
            if [ -d "$tf_dir" ]; then
              tf_fmt+=("$(terraform fmt -write=false -diff -no-color "$tf_dir" 2>&1)")
            else
              tf_fmt+=("Unable to check directory: '${tf_dir}'")
            fi
          done <<< '${{ steps.pr_details.outputs.changed_dirs }}'
          
          output=$(printf "%s\n" "${tf_fmt[@]}")

          if [ "$(echo $output | tr -d '\s' | tr -d '\n')" != "" ]; then
            rtn_chk=1
          fi
          
          echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
          {
            echo "output<<EOF"
            echo "$output"
            echo "EOF"
          }  >> $GITHUB_OUTPUT

          echo "Exit: ${rtn_chk}"
          echo "Output: ${output}"

      - name: Fail on invalid TF Format
        uses: ./.github/actions/pr-comment
        if: steps.tf_format.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              <h3>Terraform Format Error</h3>
              </summary>
              
              ```diff
              ${{ steps.tf_format.outputs.output }}
              ```
              </details>

      - name: Terraform Init
        id: tf_init
        run: |
            declare -a tf_init
            rtn_chk=0
            init_dir=$(pwd)

            which terraform

            while read -r tf_dir; do
              if [ -d "$init_dir/$tf_dir" ]; then
                cd "$init_dir/$tf_dir" || exit 1
              
                rtn_val="$(terraform init -backend=false -no-color 2>&1 || true)"
                if ! grep -q 'Terraform has been successfully initialized' <<< "$rtn_val"; then
                  tf_init+=("$rtn_val")
                fi
              else
                tf_init+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

            output=$(printf "%s\n" "${tf_init[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Fail on invalid TF Init
        uses: ./.github/actions/pr-comment
        if: steps.tf_init.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              <h3>Terraform Init Error</h3>
              </summary>
              
              ```
              ${{ steps.tf_init.outputs.output }}
              ```
              </details>

      - name: Terraform Validate
        id: tf_validate
        run: |
            declare -a tf_val
            rtn_chk=0
            init_dir=$(pwd)

            which terraform

            while read -r tf_dir; do
              if [ -d "$init_dir/$tf_dir" ]; then
                cd "$init_dir/$tf_dir" || exit 1
              
                rtn_val="$(terraform validate -no-color 2>&1 || true)"
                if ! grep -q 'The configuration is valid' <<< "$rtn_val"; then
                  tf_val+=("$rtn_val")
                fi
              else
                tf_val+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

            output=$(printf "%s\n" "${tf_val[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Fail on invalid TF Validate
        uses: ./.github/actions/pr-comment
        if: steps.tf_validate.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              <h3>Terraform Validate Error</h3>
              </summary>
              
              ```
              ${{ steps.tf_validate.outputs.output }}
              ```
              </details>
      
      - name: TF Lint
        id: tf_lint
        run: |
            declare -a tf_lint
            rtn_chk=0

            which tflint

            while read -r tf_dir; do
              if [ -d "$tf_dir" ]; then
                tf_lint+=("$(tflint -c "${{ github.workspace }}/.github/dependencies/tflint.hcl" -f compact --force --call-module-type=none --no-color --chdir "${tf_dir}" 2>&1 || true)")
              else
                tf_lint+=("Unable to check directory: '${tf_dir}'")
              fi
            done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

            output=$(printf "%s\n" "${tf_lint[@]}")

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo "$output"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo "Output: ${output}"

      - name: Fail on invalid TFlint
        uses: ./.github/actions/pr-comment
        if: steps.tf_lint.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <details>
              <summary>
              <h3>TFLint Error</h3>
              </summary>
              
              ```
              ${{ steps.tf_lint.outputs.output }}
              ```
              </details>

      - name: Trivy config scan
        id: trivy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            declare -A trivy_scan
            declare -A trivy_ignored
            rtn_chk=0
            
            which checkov
            
            while read -r tf_dir; do
              if [ -d "$tf_dir" ]; then
                rtn_val="$(trivy config --cache-dir "${{env.TRIVY_CACHE_DIR }}" "${tf_dir}" 2>&1 || true)"
                trivy_ignored["$tf_dir"]="$(echo "$rtn_val" | grep 'Ignore finding' | sed 's/^.*\]/   /g' || true)"
                trivy_scan["$tf_dir"]="$(echo "$rtn_val" | grep -v 'INFO' | sed 's/\(.*\.tf\) (terraform)/<h4>\1 (terraform)<\/h4>/g' | sed 's/^=*$//g' || true)"
              else
                trivy_scan["$tf_dir"]="  Unable to check directory"
              fi
            done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

            output=""
            for key in "${!trivy_scan[@]}"; do
              if [ "$(echo "${trivy_scan[$key]}" | tr -d '\s' | tr -d '\n')" != "" ]; then
                output+="<h3>Module: $key</h3> \n${trivy_scan[$key]}\n\n"
              fi
            done
            ignored=""
            for key in "${!trivy_ignored[@]}"; do
              if [ "$(echo "${trivy_ignored[$key]}" | tr -d '\s' | tr -d '\n')" != "" ]; then
                ignored+="<h3>Module: $key</h3> \n${trivy_ignored[$key]}\n\n"
              fi
            done

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo -e "$output"
              echo "EOF"

              echo "ignored<<EOF"
              echo -e "$ignored"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo -e "Ignored: ${ignored}"
            echo "Output: ${output}"

      - name: Checkov scan
        id: checkov
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            declare -A checkov_scan
            declare -A checkov_ignored
            rtn_chk=0
            
            which checkov
            
            while read -r tf_dir; do
              if [ -d "$tf_dir" ]; then
                checkov_ignored["$tf_dir"]="$(grep -r '#checkov:skip=' "${tf_dir}" || true)"
                checkov_scan["$tf_dir"]="$(checkov --quiet -o github_failed_only -d "${tf_dir}" | grep -v 'Terraform Scan Results')"
              else
                checkov_scan["$tf_dir"]="  Unable to check directory"
              fi
            done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

            output=""
            for key in "${!checkov_scan[@]}"; do
              if [ "$(echo "${checkov_scan[$key]}" | tr -d '\s' | tr -d '\n')" != "" ]; then
                output+="<h3>Module: $key</h3> \n${checkov_scan[$key]}\n\n"
              fi
            done
            ignored=""
            for key in "${!checkov_ignored[@]}"; do
              if [ "$(echo "${checkov_ignored[$key]}" | tr -d '\s' | tr -d '\n')" != "" ]; then
                ignored+="<h3>Module: $key</h3> \n${checkov_ignored[$key]}\n\n"
              fi
            done

            if [ "$(echo "$output" | tr -d '\s' | tr -d '\n')" != "" ]; then
              rtn_chk=1
            fi

            echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
            {
              echo "output<<EOF"
              echo -e "$output"
              echo "EOF"

              echo "ignored<<EOF"
              echo -e "$ignored"
              echo "EOF"
            }  >> "$GITHUB_OUTPUT"

            echo "Exit: ${rtn_chk}"
            echo -e "Ignored: ${ignored}"
            echo "Output: ${output}"

      - name: Security scan outputs
        uses: ./.github/actions/pr-comment
        if: steps.trivy.outputs.exit != 0 && steps.checkov.outputs.exit != 0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              <${{ steps.trivy.outputs.exit == 0 && '!--' || '' }}details>
              <summary>
              <h3>Trivy scan results</h3>
              </summary>
              ${{ steps.trivy.outputs.output }}
              </details${{ steps.trivy.outputs.exit == 0 && '--' || '' }}>

              <${{ steps.checkov.outputs.exit == 0 && '!--' || '' }}details>
              <summary>
              <h3>Checkov scan results</h3>
              </summary>
              ${{ steps.checkov.outputs.output }}
              </details${{ steps.checkov.outputs.exit == 0 && '--' || '' }}>

      - name: CICD Checks Complete PR comment
        uses: ./.github/actions/pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              ✨ CICD Run Completed successfully!

              |Terraform|Format|Init|Validate|Lint|
              |-|-|-|-|-|
              ||✅|✅|✅|✅|

              <${{ steps.trivy.outputs.ignored == '' && '!--' || '' }}details>
              <summary>
              <h3>Trivy Skipped Checks</h3>
              </summary>
              ${{ steps.trivy.outputs.ignored }}
              </details${{ steps.trivy.outputs.ignored == '' && '--' || '' }}>

              <${{ steps.checkov.outputs.ignored == '' && '!--' || '' }}details>
              <summary>
              <h3>Checkov Skipped Checks</h3>
              </summary>
              ${{ steps.checkov.outputs.ignored }}
              </details${{ steps.checkov.outputs.ignored == '' && '--' || '' }}>
