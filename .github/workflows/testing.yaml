name: 'CI/test and prepare release'
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  pull_request_target:
    types:
      - closed

permissions:
  id-token: write
  contents: write
  actions: read
  pull-requests: write

env:
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.terraform/cache"
  TFLINT_PLUGIN_DIR: "${{ github.workspace }}/.cache/tflint"
  TRIVY_CACHE_DIR: "${{ github.workspace }}/.cache/trivy"
  TF_COMPLIANCE_DIR: "${{ github.workspace }}/.github/dependencies/terraform-compliance"
  is-merge-event: >-
    ${{ github.event_name == 'pull_request_target'
     && github.event.action == 'closed'
     && github.event.pull_request.merged == true }}

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Prepare and release'
    steps:
      - name: dump github context
        run: |
          cat << EOF > /dev/null
            ${{ toJson(github) }}
          EOF

      - name: Checkout
        uses: actions/checkout@v4

      - name: CICD Start PR comment
        uses: ./.github/actions/pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              :rocket: CICD Run Initilized!

      - name: Extract changelog entry
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data: prInfo } = await github.rest.pulls.get({
              owner, repo,
              pull_number: context.issue.number,
            });

            console.log(`Found PR body:|\n${prInfo.body}`);

            const changelogEntry = ((prInfo.body
              .split(/^#+ ?/m)
              .find(x => x.startsWith('Changelog'))
              || '').split(/^```/m)[1] || '').trim();

            let changelog_error = "";

            if (!changelogEntry || changelogEntry === '') {
              changelog_error = `'Changelog' section not found in PR body! Please add it back.`;
            }

            if (changelogEntry.match(/^TODO:/m)) {
              changelog_error = `'Changelog' section needs proper text, instead of 'TODO'`;
            }

            console.log(`Changelog comment:|\n${changelogEntry}`);

            core.setOutput('changelog', changelogEntry);
            core.setOutput('changelog_error', changelog_error);

      - name: Invalid PR description
        if: steps.changelog.outputs.changelog_error != ''
        uses: ./.github/actions/pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit_sha: ${{ github.event.after }}
          fail_run: true
          update_existing: true
          comment_capture: '## Terraform Module Release'
          comment: |
              ## Terraform Module Release

              ${{ steps.changelog.outputs.changelog_error }}

      - name: Terraform Tools Cache
        uses: actions/cache@v4
        id: tf-tools-cache
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/.local/bin
          key: tfcache-${{ hashFiles('.github/dependencies/*') }}

      - name: Terraform Plugin Cache
        if: env.is-merge-event == 'false'
        uses: actions/cache@v4
        id: tf-cache
        with:
          path: |
            ${{ env.TF_PLUGIN_CACHE_DIR}}
          key: tfcache-${{ hashFiles('**/providers.tf', '**/versions.tf') }}

      - name: Cache config
        run: |
          echo "${{ github.workspace }}/.local/bin" >> "$GITHUB_PATH"
          mkdir -p "${{ github.workspace }}/.cache" "${{ env.TF_PLUGIN_CACHE_DIR }}" "${{ env.TFLINT_PLUGIN_DIR }}"

      - name: TF Dependencies
        if: steps.tf-tools-cache.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          WS_DIR: ${{ github.workspace }}
          TFLINT_PLUGIN_DIR: ${{ env.TFLINT_PLUGIN_DIR }}
        run: |
            export PATH="${{ github.workspace }}/.local/bin:${PATH}"
            for x in "${{ github.workspace }}"/.github/dependencies/*sh; do
              echo "Running: ${x}"
              $x
              echo "---"
            done

      - name: Get PR Labels and changed dirs
        id: pr_details
        uses: ./.github/actions/pr-details
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr_url: ${{ github.event.pull_request.html_url }}
          
      # - name: Fail on invalid PR details
      #   uses: ./.github/actions/pr-comment
      #   if: steps.pr_details.outputs.label_error != '' || steps.pr_details.outputs.path_error != ''
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     fail_run: true
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release
      #         ${{ steps.pr_details.outputs.label_error }}
      #         ${{ steps.pr_details.outputs.path_error }}

      # - name: Terraform Format
      #   if: env.is-merge-event == 'false'
      #   id: tf_format
      #   run: |
      #     declare -a tf_fmt
      #     rtn_chk=0

      #     which terraform

      #     while read -r tf_dir; do
      #       if [ -d "$tf_dir" ]; then
      #         tf_fmt+=("$(terraform fmt -write=false -diff -no-color "$tf_dir" 2>&1)")
      #       else
      #         tf_fmt+=("Unable to check directory: '${tf_dir}'")
      #       fi
      #     done <<< '${{ steps.pr_details.outputs.changed_dirs }}'
          
      #     output=$(printf "%s\n" "${tf_fmt[@]}")

      #     if [ "$(echo $output | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #       rtn_chk=1
      #     fi
          
      #     echo "exit=${rtn_chk}"  >> $GITHUB_OUTPUT
      #     {
      #       echo "output<<EOF"
      #       echo "$output"
      #       echo "EOF"
      #     }  >> $GITHUB_OUTPUT

      #     echo "Exit: ${rtn_chk}"
      #     echo "Output: ${output}"

      # - name: Fail on invalid TF Format
      #   if: env.is-merge-event == 'false' && steps.tf_format.outputs.exit != 0
      #   uses: ./.github/actions/pr-comment
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     fail_run: true
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release

      #         |Format|Init|Validate|Lint|Trivy|Checkov|
      #         |-|-|-|-|-|-|
      #         |❌||||||

      #         <details>
      #         <summary>
      #         <h3>Terraform Format Error</h3>
      #         </summary>
              
      #         ```diff
      #         ${{ steps.tf_format.outputs.output }}
      #         ```
      #         </details>

      # - name: Terraform Init
      #   if: env.is-merge-event == 'false'
      #   id: tf_init
      #   run: |
      #       declare -a tf_init
      #       rtn_chk=0
      #       init_dir="${{ github.workspace }}"

      #       which terraform

      #       while read -r tf_dir; do
      #         if [ -d "$init_dir/$tf_dir" ]; then
      #           cd "$init_dir/$tf_dir" || exit 1
              
      #           rtn_val="$(terraform init -backend=false -no-color 2>&1 || true)"
      #           if ! grep -q 'Terraform has been successfully initialized' <<< "$rtn_val"; then
      #             tf_init+=("$rtn_val")
      #           fi
      #         else
      #           tf_init+=("Unable to check directory: '${tf_dir}'")
      #         fi
      #       done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

      #       output=$(printf "%s\n" "${tf_init[@]}")

      #       if [ "$(echo "$output" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #         rtn_chk=1
      #       fi

      #       echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
      #       {
      #         echo "output<<EOF"
      #         echo "$output"
      #         echo "EOF"
      #       }  >> "$GITHUB_OUTPUT"

      #       echo "Exit: ${rtn_chk}"
      #       echo "Output: ${output}"

      # - name: Fail on invalid TF Init
      #   if: env.is-merge-event == 'false' && steps.tf_init.outputs.exit != 0
      #   uses: ./.github/actions/pr-comment
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     fail_run: true
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release

      #         |Format|Init|Validate|Lint|Trivy|Checkov|
      #         |-|-|-|-|-|-|
      #         |✅|❌|||||

      #         <details>
      #         <summary>
      #         <h3>Terraform Init Error</h3>
      #         </summary>
              
      #         ```
      #         ${{ steps.tf_init.outputs.output }}
      #         ```
      #         </details>

      # - name: Terraform Validate
      #   if: env.is-merge-event == 'false'
      #   id: tf_validate
      #   run: |
      #       declare -a tf_val
      #       rtn_chk=0
      #       init_dir="${{ github.workspace }}"

      #       which terraform

      #       while read -r tf_dir; do
      #         if [ -d "$init_dir/$tf_dir" ]; then
      #           cd "$init_dir/$tf_dir" || exit 1
              
      #           rtn_val="$(terraform validate -no-color 2>&1 || true)"
      #           if ! grep -q 'The configuration is valid' <<< "$rtn_val"; then
      #             tf_val+=("$rtn_val")
      #           fi
      #         else
      #           tf_val+=("Unable to check directory: '${tf_dir}'")
      #         fi
      #       done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

      #       output=$(printf "%s\n" "${tf_val[@]}")

      #       if [ "$(echo "$output" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #         rtn_chk=1
      #       fi

      #       echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
      #       {
      #         echo "output<<EOF"
      #         echo "$output"
      #         echo "EOF"
      #       }  >> "$GITHUB_OUTPUT"

      #       echo "Exit: ${rtn_chk}"
      #       echo "Output: ${output}"

      # - name: Fail on invalid TF Validate
      #   uses: ./.github/actions/pr-comment
      #   if: env.is-merge-event == 'false' && steps.tf_validate.outputs.exit != 0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     fail_run: true
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release

      #         |Format|Init|Validate|Lint|Trivy|Checkov|
      #         |-|-|-|-|-|-|
      #         |✅|✅|❌||||

      #         <details>
      #         <summary>
      #         <h3>Terraform Validate Error</h3>
      #         </summary>
              
      #         ```
      #         ${{ steps.tf_validate.outputs.output }}
      #         ```
      #         </details>
      
      # - name: TF Lint
      #   if: env.is-merge-event == 'false'
      #   id: tf_lint
      #   run: |
      #       declare -a tf_lint
      #       rtn_chk=0

      #       which tflint

      #       while read -r tf_dir; do
      #         if [ -d "$tf_dir" ]; then
      #           tf_lint+=("$(tflint -c "${{ github.workspace }}/.github/dependencies/tflint.hcl" -f compact --force --call-module-type=none --no-color --chdir "${tf_dir}" 2>&1 || true)")
      #         else
      #           tf_lint+=("Unable to check directory: '${tf_dir}'")
      #         fi
      #       done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

      #       output=$(printf "%s\n" "${tf_lint[@]}")

      #       if [ "$(echo "$output" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #         rtn_chk=1
      #       fi

      #       echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
      #       {
      #         echo "output<<EOF"
      #         echo "$output"
      #         echo "EOF"
      #       }  >> "$GITHUB_OUTPUT"

      #       echo "Exit: ${rtn_chk}"
      #       echo "Output: ${output}"

      # - name: Fail on invalid TFlint
      #   uses: ./.github/actions/pr-comment
      #   if: env.is-merge-event == 'false' && steps.tf_lint.outputs.exit != 0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     fail_run: true
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release

      #         |Format|Init|Validate|Lint|Trivy|Checkov|
      #         |-|-|-|-|-|-|
      #         |✅|✅|✅|❌|||

      #         <details>
      #         <summary>
      #         <h3>TFLint Error</h3>
      #         </summary>
              
      #         ```
      #         ${{ steps.tf_lint.outputs.output }}
      #         ```
      #         </details>

      # - name: Trivy config scan
      #   if: env.is-merge-event == 'false'
      #   id: trivy
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #       declare -A trivy_scan
      #       declare -A trivy_ignored
      #       rtn_chk=0
            
      #       which trivy
            
      #       while read -r tf_dir; do
      #         if [ -d "$tf_dir" ]; then
      #           rtn_val="$(trivy config --cache-dir "${{env.TRIVY_CACHE_DIR }}" "${tf_dir}" 2>&1 || true)"
      #           trivy_ignored["$tf_dir"]="$(echo "$rtn_val" | grep 'Ignore finding' | sed 's/^.*\]/   /g' || true)"
      #           trivy_scan["$tf_dir"]="$(echo "$rtn_val" | grep -v 'INFO' | sed 's/\(.*\.tf\) (terraform)/<h4>\1 (terraform)<\/h4>/g' | sed 's/^=*$//g' | sed 's/^  [0-9]+ .*//g' || true)"
      #         else
      #           trivy_scan["$tf_dir"]="  Unable to check directory"
      #         fi
      #       done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

      #       output=""
      #       for key in "${!trivy_scan[@]}"; do
      #         if [ "$(echo "${trivy_scan[$key]}" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #           output+="<h3>Module: $key</h3> \n${trivy_scan[$key]}\n\n"
      #         fi
      #       done
      #       ignored=""
      #       for key in "${!trivy_ignored[@]}"; do
      #         if [ "$(echo "${trivy_ignored[$key]}" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #           ignored+="<h3>Module: <u>$key</u></h3> \n<pre>${trivy_ignored[$key]}</pre>\n\n"
      #         fi
      #       done

      #       if [ "$(echo "$output" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #         rtn_chk=1
      #       fi

      #       echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
      #       {
      #         echo "output<<EOF"
      #         echo -e "$output"
      #         echo "EOF"

      #         echo "ignored<<EOF"
      #         echo -e "$ignored"
      #         echo "EOF"
      #       }  >> "$GITHUB_OUTPUT"

      #       echo "Exit: ${rtn_chk}"
      #       echo -e "Ignored: ${ignored}"
      #       echo "Output: ${output}"

      # - name: Checkov scan
      #   if: env.is-merge-event == 'false'
      #   id: checkov
      #   run: |
      #       declare -A checkov_scan
      #       declare -A checkov_ignored
      #       rtn_chk=0
            
      #       which checkov
            
      #       while read -r tf_dir; do
      #         if [ -d "$tf_dir" ]; then
      #           checkov_ignored["$tf_dir"]="$(grep -r '#checkov:skip=' "${tf_dir}" || true)"
      #           checkov_scan["$tf_dir"]="$(checkov --quiet -o github_failed_only -d "${tf_dir}" | grep -v 'Terraform Scan Results' || true)"
      #         else
      #           checkov_scan["$tf_dir"]="  Unable to check directory"
      #         fi
      #       done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

      #       output=""
      #       for key in "${!checkov_scan[@]}"; do
      #         if [ "$(echo "${checkov_scan[$key]}" | grep -v -- '---' | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #           output+="<h3>Module: <u>$key</u></h3> \n${checkov_scan[$key]}\n\n"
      #         fi
      #       done
      #       ignored=""
      #       for key in "${!checkov_ignored[@]}"; do
      #         if [ "$(echo "${checkov_ignored[$key]}" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #           ignored+="<h3>Module: $key</h3> \n<pre>${checkov_ignored[$key]}</pre>\n\n"
      #         fi
      #       done

      #       if [ "$(echo "$output" | tr -d '[:space:]' | tr -d '\n')" != "" ]; then
      #         rtn_chk=1
      #       fi

      #       echo "exit=${rtn_chk}"  >> "$GITHUB_OUTPUT"
      #       {
      #         echo "output<<EOF"
      #         echo -e "$output"
      #         echo "EOF"

      #         echo "ignored<<EOF"
      #         echo -e "$ignored"
      #         echo "EOF"
      #       }  >> "$GITHUB_OUTPUT"

      #       echo "Exit: ${rtn_chk}"
      #       echo -e "Ignored: ${ignored}"
      #       echo -e "Output: ${output}"

      # - name: Security scan outputs
      #   if: env.is-merge-event == 'false' && (steps.trivy.outputs.exit != 0 || steps.checkov.outputs.exit != 0)
      #   uses: ./.github/actions/pr-comment
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     fail_run: true
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release

      #         |Format|Init|Validate|Lint|Trivy|Checkov|
      #         |-|-|-|-|-|-|
      #         |✅|✅|✅|✅|${{ steps.trivy.outputs.exit == 0 && '✅' || '❌' }}|${{ steps.checkov.outputs.exit == 0 && '✅' || '❌' }}|

      #         <${{ steps.trivy.outputs.exit == 0 && '!--' || '' }}details>
      #         <summary>
      #         <h3>Trivy scan results</h3>
      #         </summary>
      #         ${{ steps.trivy.outputs.output }}
      #         </details${{ steps.trivy.outputs.exit == 0 && '--' || '' }}>

      #         <${{ steps.checkov.outputs.exit == 0 && '!--' || '' }}details>
      #         <summary>
      #         <h3>Checkov scan results</h3>
      #         </summary>
      #         ${{ steps.checkov.outputs.output }}
      #         </details${{ steps.checkov.outputs.exit == 0 && '--' || '' }}>

      # - name: Label PR with module name
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       github.rest.issues.addLabels({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         labels: `${{ steps.pr_details.outputs.changed_dirs }}`.split(/\r?\n/)
      #       })

      - name: Get version tags
        id: version_tags
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const query = `query($owner: String!, $repo: String!, $refPrefix: String!) {
              repository(owner: $owner, name: $repo) {
                refs(refPrefix: $refPrefix, first: 1, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
                  edges { node { name } }
                }
              }
            }`;
            const tf_modules = `${{ steps.pr_details.outputs.changed_dirs }}`.split(/\r?\n/);
            let versions = {};
            for(var i = 0; i < tf_modules.length; i++) {
              const result = await github.graphql(query, { owner, repo,
                refPrefix: `refs/tags/${tf_modules[i]}/`,
              });
              const prevNode = result.repository.refs.edges[0];
              const prevVer = prevNode ? prevNode.node.name.substring(1) : '0.0.0';
              console.log(`Found previous version ${tf_modules[i]}: ${prevVer}`);

              const newVer = prevVer.split('.');
              const newVerIdx = ['major', 'minor', 'patch'].indexOf("${{ steps.pr_details.outputs.release_label }}");
              newVer[newVerIdx] = parseInt(newVer[newVerIdx]) + 1;
              for (let i = newVerIdx + 1; i < newVer.length; i++) {
                newVer[i] = 0;
              }
              console.log(`Generated new version ${tf_modules[i]}: ${newVer}`);

              versions[tf_modules[i]] = {
                prevVer: prevVer,
                newVer: newVer.join('.')
              };
            }
            let out_string = "";
            for(var mod in versions) {
              out_string += `| ${mod} | ${versions[mod].prevVer} | ${versions[mod].newVer} |
            `;
            }
            core.setOutput('versions', versions);
            core.setOutput('out_string', out_string);

      # - name: Build Summary Comment
      #   if: env.is-merge-event == 'false'
      #   uses: ./.github/actions/pr-comment
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit_sha: ${{ github.event.after }}
      #     update_existing: true
      #     comment_capture: '## Terraform Module Release'
      #     comment: |
      #         ## Terraform Module Release

      #         ✨ CICD Run Completed successfully!

      #         |Format|Init|Validate|Lint|Trivy|Checkov|
      #         |-|-|-|-|-|-|
      #         |✅|✅|✅|✅|✅|✅|


      #         ## Release Plan
      #         | Module | Previous version | New version |
      #         |--|--|--|
      #         ${{ steps.version_tags.outputs.out_string }}

      #         <details>
      #         <summary>
      #         <h3>Commits</h3>
      #         </summary>

      #         ${{ steps.pr_details.outputs.commits }}
              
      #         </details>
                            

      #         <${{ steps.trivy.outputs.ignored == '' && '!--' || '' }}details>
      #         <summary>
      #         <h3>Trivy Skipped Checks</h3>
      #         </summary>
              
      #         ${{ steps.trivy.outputs.ignored }}
              
      #         </details${{ steps.trivy.outputs.ignored == '' && '--' || '' }}>

      #         <${{ steps.checkov.outputs.ignored == '' && '!--' || '' }}details>
      #         <summary>
      #         <h3>Checkov Skipped Checks</h3>
      #         </summary>
              
      #         ${{ steps.checkov.outputs.ignored }}
              
      #         </details${{ steps.checkov.outputs.ignored == '' && '--' || '' }}>

      # - name: Generate TF Docs
      #   id: tf_docs
      #   run: |
      #       declare -A tfdoc_output
      #       rtn_chk=0
      #       init_dir="${{ github.workspace }}"

      #       which terraform-docs
            
      #       while read -r tf_dir; do
      #         if [ -d "${init_dir}/${tf_dir}" ]; then
      #           tfdoc_output["$tf_dir"]="$(terraform-docs markdown table --sort-by required --sort-by name "${init_dir}/${tf_dir}" 2>&1 || true)"
      #         else
      #           compliance_scan["$tf_dir"]="  Unable to check directory"
      #         fi
      #       done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

      #       json=$(for key in "${!tfdoc_output[@]}"; do
      #         jq -n --arg key "$key" --arg value "${tfdoc_output[$key]}" \
      #           '{($key): $value}'
      #       done | jq -rs 'add')

      #       {
      #         echo "docs_json<<EOF"
      #         echo "$json"
      #         echo "EOF"
      #       }  >> "$GITHUB_OUTPUT"

      #       echo -e "JSON: ${json}"

      # - name: Checkout wiki
      #   # if: env.is-merge-event == 'true'
      #   uses: actions/checkout@v4
      #   with:
      #     repository: ${{ github.repository }}.wiki
      #     path: "${{ github.workspace }}/wiki"
      #     fetch-depth: 0
          
      # - name: Generate wiki page
      #   uses: actions/github-script@v7
      #   id: generate_wiki
      #   if: env.is-merge-event == 'true'
      #   with:
      #     script: |
      #       console.log("started");
      #       const { owner, repo } = context.repo;
      #       const { readdir, readFile, writeFile, mkdir } = require('fs').promises;
      #       const utf8 = { encoding: 'utf-8' };
      #       const msgParts = [];
      #       let error = "";

      #       const versions = JSON.parse((function() {/*${{ steps.version_tags.outputs.versions }}*/}).toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1]);
      #       const tf_docs = JSON.parse((function() {/*${{ steps.tf_docs.outputs.docs_json }}*/}).toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1]);

      #       console.log(`versions: ${JSON.stringify(versions)}`);
      #       console.log(`tf_docs: ${JSON.stringify(tf_docs)}`);
            
      #       const newPage = `
      #       Replace with an introduction about the module!
      #       Text and markdown up here will be preserved over time,
      #       while the rest of the wiki page is generated from the release process.

      #       # Module Location
            
      #       To use this module in your Terraform, use the below source value.
            
      #       \`\`\`hcl
      #       module "__MODULE_DIR__" {
      #         source = "git::${{ github.server_url }}/${{ github.repository }}.git?ref=__MODULE_DIR__/v__MODULE_VERSION__"
      #         # also any inputs for the module (see below)
      #       }
      #       \`\`\`
            
      #       __WARNING: Sections below this comment will be replaced and/or added to automatically.__
      #       `;

      #       console.log(`newPage: ${newPage}`);

      #       try {
      #           await mkdir('${{ github.workspace }}/wiki/generated')
      #       } catch (err) {
      #         if (err.code !== 'EEXIST') { 
      #           console.log(`Dir error: ${JSON.stringify(err)}`);
      #           error = JSON.stringify(err);
      #           return error;
      #         }
      #       }
            
      #       for (const folder of `${{ steps.pr_details.outputs.changed_dirs }}`.split(/\r?\n/)) {

      #         console.log(`Processing dir: ${folder}`);

      #         const newVersion = versions[folder].newVer;

      #         const readText = (name) => readFile(name, utf8).then(x => x.trim());
      #         const wikiPath = `wiki/generated/${folder}.md`;
      #         const prevWiki = await readText(wikiPath)
      #           .catch(err => err.code === 'ENOENT' ? newPage.replaceAll('__MODULE_DIR__', folder).replaceAll('__MODULE_VERSION__', newVersion) : Promise.reject(err));
              
      #         if (!prevWiki) { console.warn('Starting new wiki page for', folder); }
              
      #         const docs = tf_docs[folder];
      #         const changelog = `
              
      #         * PR [#${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}
              
      #         \`\`\`
      #         ${{ steps.changelog.outputs.changelog }}
      #         \`\`\`
      #         `;
              
      #         let newWiki = prevWiki;
      #         if (!newWiki.match(/^<!-- BEGIN DOCS -->$/m)) {
      #           newWiki += `\n<!-- BEGIN DOCS -->\n<!-- END DOCS -->\n`;
      #         }
              
      #         newWiki = newWiki.replace(/^<!-- BEGIN DOCS -->$[^]+^<!-- END DOCS -->$/m,
      #           `<!-- BEGIN DOCS -->\n${docs}\n<!-- END DOCS -->`);
              
      #         if (!newWiki.match(/^<!-- CHANGELOG MARKER -->$/m)) {
      #           newWiki += `\n\n# Changelog\n<!-- CHANGELOG MARKER -->\n`;
      #         }
              
      #         const changelogHeader = `## ${newVersion} (${new Date().toISOString().split('T')[0]})`
              
      #         newWiki = newWiki.replace(/^<!-- CHANGELOG MARKER -->$/m,
      #           `<!-- CHANGELOG MARKER -->\n${changelogHeader}\n${changelog}\n`);
              
      #         await writeFile(wikiPath, newWiki, utf8);
              
      #         msgParts.push(`${folder} @ ${newVersion}`);
              
      #         console.log(`Updated ${folder} @ ${newVersion}`);
      #       }
      #       return msgParts.join(', ');
      #     result-encoding: string

      # - name: Push changes to wiki
      #   if: env.is-merge-event == 'true'
      #   working-directory: "${{ github.workspace }}/wiki"
      #   run: |
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"
      #     git add -A
      #     git commit -m "${{ steps.generate_wiki.outputs.result }}"
      #     git push

      - name: Create release branches
        # if: env.is-merge-event == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          message=$(cat <<'EOF'
          ${{ github.event.pull_request.title }}
          EOF
          )
          description=$(cat <<'EOF'
          ${{ steps.changelog.outputs.changelog }}
          EOF
          )


          version_json=$(cat <<'EOF'
          ${{ steps.version_tags.outputs.versions }}
          EOF
          )

          echo "message: ${message}"
          echo "description: ${description}"

          run_ref="${{ github.sha }}"
          echo "runref: ${run_ref}"

          cd "${{ github.workspace }}"

          while read -r tf_dir; do

            git checkout -f "${run_ref}"
            git fetch --tags

            if [ -d "$tf_dir" ]; then

              version=$(jq -r '."'"$tf_dir"'".newVer' <<< "$version_json")
              version_prev=$(jq -r '."'"$tf_dir"'".prevVer' <<< "$version_json")

              echo "'$version_prev'"

              IFS='.' read -r -a version_parts <<< "$version"

              tmp_branch="tmp_${tf_dir}_v${version}"
              tag_prev="${tf_dir}/v${version_prev}"
              tag_patch="${tf_dir}/v${version}"
              tag_major="${tf_dir}/v${version_parts[0]}"
              tag_minor="${tf_dir}/v${version_parts[0]}.${version_parts[1]}"

              echo "'$tag_prev'"

              tmp_dir=$(mktemp -d)
              mv "${tf_dir}"/* "${tmp_dir}"

              if git tag -l "${tag_prev}" 2>&1 > /dev/null; then
                git checkout -f "${tag_prev}"
              else
                git checkout -f "${run_ref}"
              fi

              git checkout -b "${tmp_branch}"

              find . -maxdepth 1 ! -name '.git' ! -name '.' ! -name '..' -exec rm -rf {} \;

              mv "${tmp_dir}"/* .
              rm -rf "${tmp_dir}"

              echo "tags:"
              echo $tag_patch
              echo $tag_minor
              echo $tag_major

              git add .
              git commit -a -m "$message" -m "$description" || true
              git tag "$tag_patch" -m "$message" -m "$description"
              git tag -fa "$tag_major" -m "$message" -m "$description"
              git tag -fa "$tag_minor" -m "$message" -m "$description"
              git push origin "$tag_patch"
              git push origin "$tag_minor" -f
              git push origin "$tag_major" -f
            fi
          done <<< '${{ steps.pr_details.outputs.changed_dirs }}'

