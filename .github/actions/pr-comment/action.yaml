name: GitHub PR Comment
description: Create a GitHub Bot comment on a PR

inputs:
  comment:
    description: 'Comment to be posted'
    required: true
  # commit_sha:
  #   description: 'Commit SHA to list in subtext (github.event.after)'
  #   required: true
  # token:
  #   description: 'GitHub runner token'
  #   required: true
  fail_run:
    description: 'Return failure after posting message'
    required: false
    default: false
  update_existing:
    description: 'Should we updated an existing comment if it exists'
    required: false
    default: true
  comment_capture:
    description: 'Comment text used to find the bot comment'
    required: false
  # owner:
  #   description: 'Repository owner (context.repo.owner)'
  #   required: true
  # repo:
  #   description: 'Repository (context.repo.repo)'
  #   required: true
  # issue_number:
    # description: 'PR Issue number (context.issue.number)'
    # required: true

runs:
  using: 'composite'
  steps:
    - name: PR Comment
      uses: actions/github-script@v7
      env:
        COMMIT_SHA: ${{ github.event.after }}
      with:
        github-token: inputs.token
        script: |
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('${{ inputs.comment_capture }}');
            });

            let output = `${{ inputs.comment }}`;

            output += `\n\n*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`, Run SHA: ${process.env.COMMIT_SHA.substring(0, 7)}*`;

            if (botComment && ${{ inputs.update_existing }}) {
                github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
                })
            } else {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
            }

            if (${{ inputs.fail_run }}) {
              core.setFailed("Fail on invalid PR details");
            }
